@using LaMision.Parsing
@using Outputer.Choicing

<div class="mb-2">
    <input @ref="textInput" class="w-100" type="text" @bind="@filterValue" @oninput="Filter" />
</div>

<div>
    @foreach (var option in @filteredOptions)
    {
        <div role="option">
            <button class="btn btn-primary w-100 mt-1" @onclick="(args) => OptionSelected(args, option.Index)">@option.Value</button>
        </div>
    }
</div>

@code {
    [Parameter]
    public Choices Choices { get; set; } = new Choices();

    [Parameter]
    public EventCallback<int> OnOptionSelected { get; set; }

    private async Task OptionSelected(MouseEventArgs e, int index)
    {
        await OnOptionSelected.InvokeAsync(index);
    }

    private ElementReference textInput;

    private string filterValue = string.Empty;

    private IEnumerable<IndexedOption> filteredOptions = new List<IndexedOption>();

    private void Filter(ChangeEventArgs e)
    {
        filterValue = e.Value.ToString();

        filteredOptions = Choices.Options
            .Where(indexedOption =>
            {
                var filter = new Filter(indexedOption.Value);
                return filter.Matches(filterValue!);
            });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await textInput.FocusAsync();
    }
}
